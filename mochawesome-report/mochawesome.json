{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-15T18:04:37.398Z",
    "end": "2024-07-15T18:04:38.953Z",
    "duration": 1555,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "217179c4-3c92-4a97-bae4-18ae8c417b44",
      "title": "",
      "fullFile": "cypress\\e2e\\gui\\2.api_test.cy.js",
      "file": "cypress\\e2e\\gui\\2.api_test.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e786049-cb27-4c5b-93aa-a912b1e10f65",
          "title": "Segunda Parte do desafio com cenários de uma API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CT_004: Acessa o endereço e realiza busca \"GET\" de um usuário na api",
              "fullTitle": "Segunda Parte do desafio com cenários de uma API CT_004: Acessa o endereço e realiza busca \"GET\" de um usuário na api",
              "timedOut": null,
              "duration": 268,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Escolha o id de usuário que deseja consultar\nconst userIdToGet = 1;\ncy.customGetUsers(userIdToGet);\ncy.get('@response').should(response => {\n  expect(response.status).to.equal(200), expect(response.body.name).to.equal('Leanne Graham');\n  expect(response.body.username).to.equal('Bret');\n  expect(response.body.email).to.equal('Sincere@april.biz');\n});",
              "err": {},
              "uuid": "b740bb22-f782-4ccc-9d7f-568b02b07eda",
              "parentUUID": "4e786049-cb27-4c5b-93aa-a912b1e10f65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CT_005: Acessar o endereço e realizar requisições \"POST\" de um novo usuário na api.",
              "fullTitle": "Segunda Parte do desafio com cenários de uma API CT_005: Acessar o endereço e realizar requisições \"POST\" de um novo usuário na api.",
              "timedOut": null,
              "duration": 357,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: 'new user ',\n  username: 'newuser',\n  email: 'newuser@example.com'\n};\ncy.createUser(newUser).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body).to.be.an('object');\n  expect(response.body.id).to.be.equal(11); //Verifica o novo id\n  expect(response.body.name).to.equal(newUser.name);\n  expect(response.body.username).to.equal(newUser.username);\n  expect(response.body.email).to.equal(newUser.email);\n});",
              "err": {},
              "uuid": "57a6324d-cc4f-4c36-8e41-73339c236b75",
              "parentUUID": "4e786049-cb27-4c5b-93aa-a912b1e10f65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CT_006: Acessar o endereço e realizar requisições \"PUT\" em algum usuário da API.",
              "fullTitle": "Segunda Parte do desafio com cenários de uma API CT_006: Acessar o endereço e realizar requisições \"PUT\" em algum usuário da API.",
              "timedOut": null,
              "duration": 381,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 5; // Escolha ID do usuário que você deseja atualizar\nconst updatedUserData = {\n  id: userId,\n  name: 'NovoNome',\n  username: 'novo_username',\n  email: 'novo_email@example.com'\n};\ncy.updateUser(userId, updatedUserData).then(response => {\n  // Verifica os dados como ficou o resultado apos as alterações\n  expect(response.status).to.equal(200);\n  expect(response.body).to.be.an('object');\n  expect(response.body.name).to.equal(updatedUserData.name);\n  expect(response.body.username).to.equal(updatedUserData.username);\n  expect(response.body.email).to.equal(updatedUserData.email);\n});",
              "err": {},
              "uuid": "8f506fac-f930-434f-b6f3-234e52f53b0d",
              "parentUUID": "4e786049-cb27-4c5b-93aa-a912b1e10f65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CT_007: Acessar o endereço e realizar requisições \"DELETE\" em algum usuário da API.",
              "fullTitle": "Segunda Parte do desafio com cenários de uma API CT_007: Acessar o endereço e realizar requisições \"DELETE\" em algum usuário da API.",
              "timedOut": null,
              "duration": 361,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userIdToDelete = 5; // Escolha o id de usuário que deseja deletar \ncy.deleteUserById(userIdToDelete).then(response => {\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "8a043f39-771f-4091-8477-81d60d3a05df",
              "parentUUID": "4e786049-cb27-4c5b-93aa-a912b1e10f65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b740bb22-f782-4ccc-9d7f-568b02b07eda",
            "57a6324d-cc4f-4c36-8e41-73339c236b75",
            "8f506fac-f930-434f-b6f3-234e52f53b0d",
            "8a043f39-771f-4091-8477-81d60d3a05df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1367,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}